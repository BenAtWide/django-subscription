                              Django Subscription
                              ===================

Author: Maciej Pasternacki <maciej@pasternacki.net>
Date: 2009/06/09 19:28:18



Django-subscription is an application for handling PayPal-based pay
subscriptions. Module does not handle explicit permissions; instead,
subscribed user are automatically added to predefined groups using
`django.contrib.auth' application. It needs django-paypal application
available at [http://github.com/johnboxall/django-paypal/] for handling
payments.

Table of Contents
=================
1 Installation
2 Settings
3 Models
    3.1 Subscription
    3.2 UserSubscription
        3.2.1 methods
    3.3 Transaction
4 Signals
5 Views
6 URLs
7 Templates
8 Example code
9 Bugs and omissions
    9.1 Plans
10 License


1 Installation
~~~~~~~~~~~~~~
  Copy or symlink `subscription/' directory on Python path (`setup.py'
  script for automated installation will be supplied later on). Module
  contents are available in the `subscription' module.

  In order to use application, add `subscription' to INSTALLED_APPS in
  Django project `settings.py' file.

2 Settings
~~~~~~~~~~
  In project's `settings.py' file `SUBSCRIPTION_PAYPAL_SETTINGS'
  should be set to a dictionary with default PayPal button settings,
  as described in django-paypal documentation. At least the `business'
  key should be set to your PayPal business e-mail.

  `SUBSCRIPTION_PAYPAL_FORM' can be set to a form class pathname as
  string to use custom PayPal payment button class.  Default is
  'paypal.standard.forms.PayPalPaymentsForm'.  To use PayPal encrypted
  buttons or shared secrets, specify needed django-paypal settings and
  set an appropriate class here.

  `SUBSCRIPTION_GRACE_PERIOD' is an integer and it specifies number of
  days after individual subscription expiry on which account is
  actually treated as expired.  Default is 2 days.  Intent of this
  setting is that recurring payments take place e.g. monthly, so
  either on last day of subscription period, or even on first day
  after it; this way we avoind unintentionally locking out user
  account.

3 Models
~~~~~~~~
  Two models defined by the application are available in the
  `subscription.models' module.

3.1 Subscription
================
   Main model used by the application is `Subscription'.  It
   represents a single subscription available for users.  Subscription
   has following fields:
   - `name' - short name
   - `description' - longer description
   - `price' - subscription price
   - `recurrence_period' - PayPal subscription recurrence period (used
     only if `recurrence_unit' is not `None')
   - `recurrence_unit' - in what units is recurrence period expressed:
     - D for days
     - W for weeks
     - M for months
     - Y for years
     - None (NULL) for one-time (non-recurring) payment
   - `group' - one to one relation to
     `django.contrib.auth.models.Group'.  Subscription is identified
     by the group.

3.2 UserSubscription
====================
   This model instances define a user's subscription.  Model has
   following fields:
   - `user' - one-to-one relation to `auth.User' model, primary key;
   - `subscription' - foreign key relation to `Subscription' model,
     specifies kind of subscription `user' is subscribed to;
   - `expires' - expiry date (if null, subscription never expires)
   - `IPN' - foreign key to `paypal.standard.IPN' model, pointing to
     payment related to last extension of subscription.

3.2.1 methods
-------------
    - `user_is_group_member()' - returns true if `user' is member of
      `subscription.group';
    - `expired()' - returns true if there is more than
      `SUBSCRIPTION_GRACE_PERIOD' days after `expires' date;
    - `valid()' - returns true if:
      + `expired()' is false and `user_is_group_member()' is false, or
      + `expired()' is true and `user_is_group_member()' is true;
    - `unsubscribe()' - remove `subscription.group' from `user''s groups
    - `subscribe()' - add `subscription.group' to `user''s groups
      (called automatically on PayPal one-time payment and
      subscription start);
    - `fix()' - if not `valid()', call `unsubscribe()' or `subscribe()';
    - `extend(timedelta=None)' - extend `expires' field by provided
      `datetime.timedelta', or by `subscription''s recurrence period
      (called automatically on PayPal subscription payments);

    Convenience function `subscription.models.unsubscribe_expired()'
    is also provided.  It loops over all expired `UserSubscription'
    instances and calls `unsubscribe()' method.  It is intended to be
    called automatically from cron, django-cron, or on some event.
    Alternatively, `fix()' can be called on events related to
    user, e.g. on user login.

3.3 Transaction
===============
   `Transaction' model is mostly read-only and is used to view
   subscription-related events in the admin panel. It has following
   fields:
   - `timestamp' - date and time of event
   - `subscription' - foreign key of `Subscription' model that event
     was related to
   - `user' - foreign key of `django.contrib.auth.models.User' model
     that event was related to
   - `ipn' - foreign key of `paypal.standard.ipn.models.PayPalIPN'
     model identifying payment callback related to event
   - `event' - type of event, one of:
     - one-time payment
     - subscription payment
     - unexpected payment
     - payment flagged
     - subscribed
     - unexpected subscription
     - cancel subscription
     - unexpected cancel
     - expired subscription
     - unexpected expiration
     - modify subscription
     The "unexpected" events are ones that could not be related to any
     specific user/subscription pair.
   - `amount' - amount (`mc_gross') of `ipn'
   - `comment' - site admin's comment, only field intended to be
     modified.
   In admin panel's `Transaction' object list, fields `subscription',
   `user', `ipn' are links to related modes instance's admin forms.

4 Signals
~~~~~~~~~
  On subscription-related events, the application sends signals that
  project code can connect to and do some site-specific things (e.g.
  send a nice e-mail to user).  Signals are available in
  `subscription.signals' package.  All signals have `Subscription'
  instance (or, in extreme cases with `event' signal, `None') as
  sender, and have arguments `ipn'
  (`paypal.standard.ipn.models.PayPalIPN' model instance), `user'
  (`django.contrib.auth.models.User' instance), `subscription'
  (`Subscription' instance or None, same as sender).  Signals are:
  - `signed_up' - user signed up for one-time payment,
  - `subscribed' - user subscribed
  - `unsubscribed' - user unsubscribed from PayPal
  - `paid' - payment received from a subscription
  - `event' - other strange event, receives additional `event'
    argument, which may be
    - `unexpected_payment'
    - `flagged'
    - `unexpected_subscription'
    - `unexpected_cancel'
    - `unexpected_expiration'
    - `subscription_modify'

5 Views
~~~~~~~
  Views are available in `subscription.views' module
  - `subscription_list' lists available subscription using
    `subscription/subscription_list.html' template
  - `subscription_detail' presents details of the selected
    subscription (login is required for this view)

6 URLs
~~~~~~
  Module `subscription.urls' configures default urls for module.  This
  are:
  - root URL displays `subscription_list' view
  - /id/ (numeric ID) displays `subscription_detail' view for
    Subscription with ID /id/
  - `paypal/' is PayPal IPN URL
  - `done/' displays `subscription/subscription_done.html' template
    and is where successful PayPal transactions are redirected
  - `cancel/' displays `subscription/subscription_cancel.html'
    template and is where cancelled PayPal transactions are redirected

7 Templates
~~~~~~~~~~~
  Templates `subscription/subscription_done.html' and
  `subscription/subscription_cancel.html' receive no context.

  Template `subscription/subscription_list.html' receives
  `object_list' variable which is a list of objects.  List element's
  `subscription' attribute contains a `Subscription' object, and
  `form' attribute contains PayPal form for this object.

  Template `subscription/subscription_detail.html' receives `object'
  variable which is a `Subscription' object, and `form' variable which
  is a PayPal form for the `object'.

8 Example code
~~~~~~~~~~~~~~
  Example usage and templates are available as `django-saas-kit'
  project at [http://github.com/CrowdSense/django-saas-kit/]

9 Bugs and omissions
~~~~~~~~~~~~~~~~~~~~
  - There is no `setup.py' script for automated installation.
  - No support for changing (upgrading/downgrading) subscription by
    user; received payments for subscription from already
    subscribed users have undefined consequences.
  - No support for PayPal PDT; PDT has only presentational value (IPN
    needs to be received anyway, and PDT should be used only to
    display transaction details to user on after transaction landing
    page), so support for it has been intentionally omitted.

9.1 Plans
=========
   - Support for upgrading and downgrading plan
   - Single payments for subscription, including possibility of
     pay-as-you-go scheme

10 License
~~~~~~~~~~
  This project is dual-licensed on terms of MIT (MIT-LICENSE.txt) and
  GPL (GPL-LICENSE.txt) licenses.
